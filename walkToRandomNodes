local pathNodes = game.Workspace.PathNodes:GetChildren()
local Humanoid = script.Parent:WaitForChild("Humanoid")
local StartPoint = script.Parent:WaitForChild("HumanoidRootPart")
local PathfindingService = game:GetService("PathfindingService")
local playerCaught = false
local previousNode = nil
local recentlyStoppedFollowingNodes = script.Parent.recentlyStoppedFollowingNodes.Value
local lastCaughtWaypoint = 0
local walkToPathNode_CRT_running = false

local path = PathfindingService:CreatePath()

local function walkToRandomPathNode()
	wait(0.01)
	if script.Parent.followingPathNode.Value or script.Parent.playerCaught.Value then print("out"..tostring(script.Parent.followingPathNode.Value)..tostring(script.Parent.playerCaught.Value)); return end
	script.Parent.followingPathNode.Value = true
	local currentNode = pathNodes[math.random(1,#pathNodes)].Position
	path:ComputeAsync(StartPoint.Position,currentNode)
	while currentNode == previousNode do
		currentNode = pathNodes[math.random(1,#pathNodes)].Position
		path:ComputeAsync(StartPoint.Position,currentNode)
	end
	local waypoints = path:GetWaypoints()

	local function checkIfPlayerCaught()
		while task.wait(0.01) do
			if script.Parent.playerCaught.Value == true then
				return true
			end
		end
	end

	for _,waypoint in ipairs(waypoints) do
		if script.Parent.recentlyStoppedFollowingNodes.Value then script.Parent.recentlyStoppedFollowingNodes.Value = false; return end
		if script.Parent.playerCaught.Value == true then break end -- this is the breakpoint where playerCaught could be true, disabling the function
		local Part = Instance.new("Part", workspace.WayPoints)
		Part.Material = "Neon"
		Part.Size = Vector3.new(0.5,0.5,0.5)
		Part.Position = waypoint.Position
		Part.Anchored = true
		Part.CanCollide = false
		Humanoid:MoveTo(waypoint.Position)
		Humanoid.MoveToFinished:Wait()
	end
	for _, waypoint in ipairs(game.Workspace.WayPoints:GetChildren()) do
		waypoint:Destroy()
	end
	wait(2)
	previousNode = currentNode
	print("Done walking to Node")
	script.Parent.followingPathNode.Value = false
	walkToPathNode_CRT_running = false
end

local walkToPathNode_CRT = coroutine.create(walkToRandomPathNode)

local roamMap = coroutine.wrap(function()
	while true do
		task.wait(0.1)
		while script.Parent.playerCaught.Value == false do
			task.wait(0.05)
			if walkToPathNode_CRT_running == false then
				walkToPathNode_CRT_running = true
				walkToPathNode_CRT = coroutine.create(walkToRandomPathNode)
				coroutine.resume(walkToPathNode_CRT)
			end
		end
		if script.Parent.playerCaught.Value == true then
			coroutine.close(walkToPathNode_CRT)
			walkToPathNode_CRT_running = false
		end
	end
end)

wait(5)
local PLAYER_NOT_DETECTED_AND_NOT_WALKING_TO_NODE = not script.Parent.playerCaught.Value and not script.Parent.followingPathNode.Value
if PLAYER_NOT_DETECTED_AND_NOT_WALKING_TO_NODE then
	roamMap()
	print("NPC Roaming")
end
